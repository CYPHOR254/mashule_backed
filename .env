port:3000

//connection
DB-PORT = 3306
DB_HOST = localhost
DB_USERNAME = root
DB_PASSWORD = '!asapmysql+2enen#'
DB_NAME = mashuledb

JWT_SECRET=!asapjwt+2enen#





// router.get('/schools', (req, res) => {
//   const query = 'SELECT idusers, schoolName, location, schoolCode, county FROM users';

//   db.query(query, (err, result) => {
//     if (err) {
//       console.error('Error fetching schools:', err);
//       return res.status(500).json({ error: 'Internal server error' });
//     }

//     const jsonData = result.map((school) => ({
//       id: school.idusers, // Use the correct column name here
//       schoolName: school.schoolName,
//       location: school.location,
//       schoolCode: school.schoolCode,
//       county: school.county,
//     }));
//     console.log(jsonData); // Log the data in JSON format
//     res.json(jsonData); // Send the array of school objects directly
//   });
// });
















# // // Define a route handler for the registration endpoint
# // router.post("/register", async (req, res) => {
# //     const { username, email, phoneNo, Idnumber, DOB } = req.body;
  
# //     // Save parent details to parentDB
# //     try {
# //       db.query(
# //         "INSERT INTO parentDB ( username, email, phoneNo, Idnumber, DOB) VALUES (?, ?, ?, ?, ?)",
# //         [username, email, phoneNo, Idnumber, DOB]
# //       );
# //     } catch (err) {
# //       console.error(err);
# //       return res.status(500).json({ error: "Failed to save parent details" });
# //     }
  
# //     // Generate UUID and OTP password
# //     const uuid = uuidv4();
  
# //     const otp = Math.floor(1000 + Math.random() * 9000).toString();
# //     console.log("fywecdfsvcsjg");
# //     console.log(otp);
# //     const user_name = username;
  
# //     // Hash the OTP password and create pin
# //     try {
# //       const hashedOtp = await bcrypt.hash(otp, 10);
# //       const pin = Math.floor(1000 + Math.random() * 9000).toString();
# //       // const hashedPin = await bcrypt.hash(pin, 10);
# //       const isActive = true;
# //       const isBlocked = false;
# //       const trials = 3;
# //       const firstLogin = true;
  
# //       // Save user details to USERSDB
# //       db.query(
# //         "INSERT INTO USERSDB (firstName,'lastName, phoneNo, Idnumber,DOB, password , email,   pin, isActive ,isBlocked ,trials , firstLogin) VALUES (?, ?, ?, ?, ?, ?, ?,? ,? ,? ,?)",
# //         [
# //           username,
# //           phoneNo,
# //           Idnumber,
# //           DOB,
# //           hashedOtp,
# //           email,
# //           pin,
# //           isActive,
# //           isBlocked,
# //           trials,
# //           firstLogin,
# //         ]
# //       );
  
      
# //       // Send email to user with OTP password
# //       const transporter = nodemailer.createTransport({
# //         host: "smtp.gmail.com",
# //         port: 465,
# //         secure: true,
# //         auth: {
# //           user: "earvinekinyua@gmail.com",
# //           pass: "eobgrnqgysxkdvsh",
# //         },
# //       });
  
# //       const mailOptions = {
# //         from: "earvinekinyua@gmail.com",
# //         to: email,
# //         subject: "OTP password and PIN for login",
# //         text: `Hello  ${user_name},\n\nYour OTP password for login is:${otp}\nYour PIN for login is: ${pin}\n\nThank you,\nThe App Team`,
# //       };
  
# //       await transporter.sendMail(mailOptions);
  
# //       // Send success response with UUID
# //       res.status(200).json({ success: "User registered successfully", uuid });
# //     } catch (err) {
# //       console.error(err);
# //       return res.status(500).json({ error: "Failed to save user details" });
# //     }
# //   });





# // router.post('/register', (req, res) => {
# //     let user = req.body;
# //     query = "SELECT * FROM users WHERE email = ?";
# //     connection.query(query, [user.email], (err, result) => {
# //         if (!err) {
# //             if (result.length <= 0) {
# //                 query = "INSERT INTO users (id,firstName, lastName, email, phoneNumber, idNumber, DOB, password, gender, schoolName, location, numberOfStreams, numberOfStudents, schoolEvents, role, isactive) VALUES (?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'user', 'true')";
# //              const values = [user.firstName, user.lastName, user.email, user.phoneNumber, user.idNumber, user.DOB, user.password, user.gender, user.schoolName, user.location, user.numberOfStreams, user.numberOfStudents, user.schoolEvents, user.role, user.isactive];

# //                 connection.query(query, values, (err, result) => {
# //                     if (!err) {
# //                         return res.status(200).json({ message: "User registered successfully." });
# //                     } else {
# //                         return res.status(500).json({ message: "Failed to register user.", error: err });
# //                     }
# //                 });
# //             } else {
# //                 return res.status(400).json({ message: "Email already exists." });
# //             }
# //         } else {
# //             return res.status(500).json({ message: "Database query error.", error: err });
# //         }
# //     });
# // });

